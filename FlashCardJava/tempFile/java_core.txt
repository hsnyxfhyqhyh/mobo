>>Give a few reasons for using Java?
Java is a fun language. Let’s look at some of the reasons: 
Built-in support for multi-threading, socket communication, and memory management (automatic garbage collection). 
Object Oriented (OO). 
Better portability than other languages across operating systems. 
Supports Web based applications (Applet, Servlet, and JSP), distributed applications (sockets, RMI, EJB etc) and network protocols (HTTP, JRMP etc) with the help of extensive standardized APIs (Application 
Programming Interfaces). 
####

>>What is the main difference between the Java platform and the other software platforms?
Java platform is a software-only platform, which runs on top of other hardware-based platforms like UNIX, NT etc
The Java platform has 2 components: 
Java Virtual Machine (JVM) – ‘JVM’ is a software that can be ported onto various hardware platforms. Byte codes are the machine language of the JVM. 
Java Application Programming Interface (Java API) – set of classes written using the Java language and run on the JVM. 
####

>>What is the difference between C++ and Java?
Both C++ and Java use similar syntax and are Object Oriented, but:

Java does not support pointers. Pointers are inherently tricky to use and troublesome.

Java does not support multiple inheritances because it causes more problems than it solves. Instead Java supports multiple interface inheritance, which allows an object to inherit many method signatures from different interfaces with the condition that the inheriting object must implement those inherited methods. The multiple interface inheritance also allows an object to behave polymorphically on those methods. 

Java does not support destructors but adds a finalize() method. Finalize methods are invoked by the garbage collector prior to reclaiming the memory occupied by the object, which has the finalize() method. This means you do not know when the objects are going to be finalized. Avoid using finalize() method to release nonmemory resources like file handles, sockets, database connections etc because Java has only a finite number of these resources and you do not know when the garbage collection is going to kick in to release these resources through the finalize() method.

Java does not include structures or unions because the traditional data structures are implemented as an object oriented framework 

All the code in Java program is encapsulated within classes therefore Java does not have global variables or functions.

C++ requires explicit memory management, while Java includes automatic garbage collection. 

####

>>What are the usages of Java packages?
It helps resolve naming conflicts when different packages have classes with the same names. This also helps you organize files within your project. 
	For example: java.io package do something related to I/O and java.net package do something to do with network and so on. 

If we tend to put all .java files into a single package, as the project gets bigger, then it would become a nightmare to manage all your files.
You can create a package as follows with package keyword, which is the first keyword in any Java program followed by import statements. 

The java.lang package is imported implicitly by default and all the other packages must be explicitly imported.

package com.xyz.client ;
import java.io.File;
import java.net.URL;

####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

>>
####

